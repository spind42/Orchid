// Configure build, dependencies, output jar, and Java compatibility
//------------------------------------------------------------------------------
apply from: 'gradle/utils.gradle'

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath(Libs.task_tree)
        classpath(Libs.gradle_bintray_plugin)
        classpath(Libs.gradle_git)
        classpath(Libs.buildsrcversions)
        classpath(Libs.kotlin_gradle_plugin)
    }
}

apply plugin: 'base'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'de.fayard.buildSrcVersions'
apply plugin: 'jacoco'

group = 'io.github.javaeden.orchid'

// Define the 'types' of projects Orchid is working with
//      coreProject - the main core module required by every other Orchid extension
//      themeProjects - Orchid themes, required to actually use Orchid by all other projects
//      languageExtensionProjects - Additional functionality to add to Orchid, specifically those extensions which add
//              additional compilers, parsers, or augment page content
//      pluginProjects - Additional functionality to add to Orchid, none of which are required by any project (includes
//              all languageExtensionProjects)
//      bundleProjects - Groups of plugins and themes intended to make it easy to get set up with a fully-configured
//              Orchid environment with a single dependency artifact.
//      mainProjects - The aggregate of core, theme, and plugin groups. Includes all packages which contain sources.
//              Excludes 'empty projects' like ':themes' and ':plugins', as well as the root project and 'buildSrc'
ext.coreProject               = [project(':OrchidCore')]
ext.themeProjects             = subprojects.findAll { return (it.path.startsWith(":themes"))             && (it.name != "themes") }
ext.languageExtensionProjects = subprojects.findAll { return (it.path.startsWith(":languageExtensions")) && (it.name != "languageExtensions") }
ext.integrationProjects       = subprojects.findAll { return (it.path.startsWith(":integrations"))       && (it.name != "integrations") }
ext.plainPluginProjects       = subprojects.findAll { return (it.path.startsWith(":plugins"))            && (it.name != "plugins")}
ext.bundleProjects            = subprojects.findAll { return (it.path.startsWith(":bundles"))            && (it.name != "bundles") }
ext.pluginProjects            = languageExtensionProjects + integrationProjects + plainPluginProjects
ext.mainProjects              = coreProject + themeProjects + pluginProjects

allprojects {
    apply plugin: 'idea'
    apply plugin: "com.dorongold.task-tree"
    repositories {
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url 'https://jitpack.io' }
    }
}

// Deploy
//----------------------------------------------------------------------------------------------------------------------

tag {
    message { "Bump version to ${version}" }
}

task getReleaseName {
    doLast {
        println project.version.toString()
    }
}

task getReleaseNotes {
    doLast {
        println getChangelogFile().text.split("---").last().trim()
    }
}

// Add check to make sure every release version has a Changelog file
//----------------------------------------------------------------------------------------------------------------------

task checkForChangelogFile {
    doLast {
        if(project.hasProperty("release") && (project.property("release") != 'false') && !getChangelogFile().exists()) {
            throw new FileNotFoundException("There is no changelog entry for this version, expected 'changelog/${getChangelogFileName()}' to exist.")
        }
    }
}
check.dependsOn checkForChangelogFile

task archiveDocumentation(type: Zip) {
    from "${project(':OrchidCore').buildDir}/docs/orchid"
    from getChangelogFile()

    include '**/*'
    archiveName "docs-${project.version}.zip"
    destinationDir(file("$buildDir/orchid/archives"))
}

task deploy {
    dependsOn archiveDocumentation
    doLast { }
}

// Configure
//----------------------------------------------------------------------------------------------------------------------

configure(mainProjects)   { apply from: "$groupsScript/mainProjects.gradle" }
configure(themeProjects)  { apply from: "$groupsScript/themeProjects.gradle" }
configure(pluginProjects) { apply from: "$groupsScript/pluginProjects.gradle" }
configure(bundleProjects) { apply from: "$groupsScript/bundleProjects.gradle" }

// Code Coverage Reports
//----------------------------------------------------------------------------------------------------------------------
task codeCoverageReport(type: JacocoReport) {
    dependsOn {
        mainProjects*.test
    }

    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    mainProjects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled false
        csv.enabled false
    }
}

configurations { codacy }
dependencies {
    codacy(Libs.codacy_coverage_reporter)
}
task sendCoverageToCodacy(type: JavaExec) {
    dependsOn codeCoverageReport

    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    ]
}
