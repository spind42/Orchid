package com.eden.orchid.impl.generators

import com.eden.orchid.api.OrchidContext
import com.eden.orchid.api.generators.OrchidGenerator
import com.eden.orchid.api.options.annotations.Description
import com.eden.orchid.api.options.annotations.Option
import com.eden.orchid.api.theme.pages.OrchidPage
import java.util.stream.Stream
import javax.inject.Inject


class ExternalIndicesGenerator
@Inject
constructor(context: OrchidContext) : OrchidGenerator(context, GENERATOR_KEY, OrchidGenerator.PRIORITY_LATE + 1) {

    @Option
    @Description("The indices generated by an Orchid site can be included in the build of another Orchid site, to make intelligent links between the two sites. The index at `meta/indices.json` will crawl all the sub-indices of that site, or just a single one of that site\'s sub-indices can be included.")
    private val externalIndices: Array<String>? = null

    override fun startIndexing(): List<OrchidPage> {
//        if (!EdenUtils.isEmpty(externalIndices)) {
//            for (externalIndex in externalIndices) {
//                val indexJson = this.context.loadAdditionalFile(externalIndex)
//                if (indexJson != null) {
//                    val index = OrchidIndex.fromJSON(context, JSONObject(indexJson))
//                    val externalIndexKey = FilenameUtils.getBaseName(externalIndex).replace(".index", "")
//                    return index.allPages
//                }
//            }
//        }

        return emptyList()
    }

    override fun startGeneration(pages: Stream<out OrchidPage>) {

    }

    companion object {
        val GENERATOR_KEY = "external"
    }
}
