
// Normal module configuration
//----------------------------------------------------------------------------------------------------------------------

apply plugin: 'java-library'

dependencies {

    // Dynamic Component Registration
    api(Libs.guice)
    api(Libs.classgraph)

    // core utilities
    api(Libs.com_eden_common)
    api(Libs.clog4j)
    api(Libs.krow)
    api(Libs.okhttp)
    api(Libs.commons_io)
    api(Libs.commons_lang3)
    api(Libs.thumbnailator)
    
    // validation
    api(Libs.validation_api)
    implementation(Libs.hibernate_validator)
    implementation(Libs.javax_el)

    // Included parsers: JSON, YAML, TOML, CSV, Pebble, Markdown, Sass
    api(Libs.json)
    implementation(Libs.snakeyaml)
    implementation(Libs.toml4j)
    implementation(Libs.pebble)
    implementation(Libs.jsass)
    implementation(Libs.univocity_parsers)

    // Flexmark extensions
    api(Libs.flexmark)
    implementation(Libs.flexmark_ext_aside)
    implementation(Libs.flexmark_ext_attributes)
    implementation(Libs.flexmark_ext_enumerated_reference)
    implementation(Libs.flexmark_ext_gfm_tables)
    implementation(Libs.flexmark_ext_gfm_tasklist)
    implementation(Libs.flexmark_ext_toc)

    // server
    implementation(Libs.nanohttpd)
    implementation(Libs.nanohttpd_websocket)

    // generate own documentation with Orchid
    orchidCompile mainProjects
}

// Make sure Core is compiled before plugins, but javadoc run after plugins
//----------------------------------------------------------------------------------------------------------------------

static boolean otherProjectsTask(Task task, String taskName) {
    return !task.path.startsWith(':OrchidCore') && task.path.endsWith(":${taskName}")
}

project.parent.subprojects.each { subproject ->
    project.tasks.javadoc.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }
    project.tasks.orchidRun.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }
    project.tasks.javadoc.shouldRunAfter subproject.tasks.matching { task -> otherProjectsTask(task, 'javadoc') }
}

// Generate a Class containing the current build version, so it can be injected into OrchidSite
//----------------------------------------------------------------------------------------------------------------------

// TODO: Change this to have the runtime read from a .properties file rather than reflectively find this class
task generateSources {
    def outputDir = file("$buildDir/generated-src")
    outputs.dir outputDir
    doFirst {
        def srcFile = new File(outputDir, "com/eden/orchid/OrchidVersion.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""
package com.eden.orchid;
public class OrchidVersion {
   public static String getVersion() { return "$project.version"; }
}
""")
    }
}
compileJava.dependsOn generateSources
compileJava.source generateSources.outputs.files, sourceSets.main.java
